from itertools import combinations, product
class Solution:
    def letterCombinations(self, digits):
        """
        :type digits: str
        :rtype: List[str]
        """
        
        dic = {
            '1' : [''],
            '2' : ['a','b','c'],
            '3' : ['d','e','f'],
            '4' : ['g','h','i'],
            '5' : ['j','k','l'],
            '6' : ['m','n','o'],
            '7' : ['p','q','r','s'],
            '8' : ['t','u','v'],
            '9' : ['w','x','y','z'],
        }
        res = list()
        if len(digits)==0:
            return res
        elif len(digits) == 1:
            return dic[digits[0]]
        else:
            for i in range(0,len(digits)):
                print(dic[digits[i]])
                res.append(dic[digits[i]])
            #print res

            word = res[0]
            lists = res[1:len(res)]
            ##print word

            #print lists
            new_res = list()
            for sublist in combinations(lists,len(lists)):
                basis = [word]+list(sublist)
                for combo in product(*basis):
                    #print("".join(combo))
                    new_res.append("".join(combo))

            return new_res
